// –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
// const fs = require('fs');
// const path = require('path');
// // const pathdataJson = path.join(__dirname, '../examples/input-vloj.json');
// const pathdataJson = path.join(__dirname, '../examples/input.json');
// const outputdataJson = path.join(__dirname, '../examples/example-output.json');
// const dataJson = fs.readFileSync(pathdataJson);
// const dataInput = JSON.parse(dataJson);


function prepareData(data, sprint) {
  let  userList = {}, sprintsList = {};
  const resultArray = [], summaryList = {}, commitArray = [], commentArray = [], currentChange = {100: 0, 500: 0, 1000: 0, 1001: 0}, previousChange = {100: 0, 500: 0, 1000: 0, 1001: 0}, activityData = Array(168).fill(0);

  //—Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–µ—Ä–µ–¥–∞—é—â–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Å–µ–±—è –∂–µ –ø—Ä–∏ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
  function distributeData(item) {
    function checkObj(arr) {
      arr.forEach((value) => {
        if(typeof value === 'object') {
          distributeData(value);
        }
      });
    }

    if(item.type === 'User') {
      userList[item.id] = item;
      userList[item.id].valueText = 0;
      userList[item.id].likes = 0;
      checkObj(item.friends);
      checkObj(item.commits);
      checkObj(item.comments);
    }

    if(item.type === 'Sprint') {
      sprintsList[item.id] = item;
      sprintsList[item.id].value = 0;
    }

    if(item.type === 'Summary') {
      summaryList[item.id] = item;
      //—Å—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–∞–º–º–∞—Ä–∏—Å–∞
      summaryList[item.id].change = item.added + item.removed;
      checkObj(item.comments);
    }

    if(item.type === 'Comment') {
      checkObj(item.likes);
      if(typeof item.author === 'object') {
        distributeData(item.author);
      }
      commentArray.push(item);
    }

    if(item.type === 'Commit') {
      checkObj(item.summaries);
      if(typeof item.author === 'object') {
        distributeData(item.author);
      }
      commitArray.push(item);
    }

    if(item.type === 'Issue') {
      checkObj(item.comments);
      if(typeof item.resolvedBy === 'object') {
        distributeData(item.resolvedBy);
      }
    }

    if(item.type === 'Project') {
      checkObj(item.issues);
      checkObj(item.commits);
      checkObj(item.dependencies);
    }
  }

  data.forEach((dataItem) => {
    distributeData(dataItem);
  });

  commentArray.forEach((item) => {
    //–Ω–∞—Ö–æ–¥–∏–º –ª–∞–π–∫–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π —Å–ø—Ä–∏–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if((sprintsList[sprint.sprintId].startAt <= item.createdAt)&&(item.createdAt <= sprintsList[sprint.sprintId].finishAt)) {
      //–µ—Å–ª–∏ –≤ —Å–≤–æ–π—Å—Ç–≤–µ –±—É–¥–µ—Ç –ª–µ–∂–∞—Ç—å –æ–±—ä–µ–∫—Ç
      userList[(typeof item.author) === 'object' ? item.author.id : item.author].likes += item.likes.length;
    }
  });

  //–∑–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω—É–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, —Ç.–∫. –¥–∞–ª—å—à–µ –±—É–¥–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ id
  const previousSprint = sprintsList[sprint.sprintId - 1];
  const currentSprint = sprintsList[sprint.sprintId];
  sprintsList = Object.values(sprintsList);

  //–±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∏—Ç–µ—Ä–∞—Ü–∏–π –≤ –ø–µ—Ä–µ–±–æ—Ä–µ —Å–ø—Ä–∏–Ω—Ç–æ–≤, —Ç.–∫. –æ–Ω–∏ —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
  function binarySearch(sortedNumbers, n) {
  let start = 0;
  let end = sortedNumbers.length;
  while (start < end) {
    const middle = Math.floor((start + end) / 2);
    const valueStart = sortedNumbers[middle].startAt;
    const valueEnd = sortedNumbers[middle].finishAt;

    if ((n <= valueEnd)&&(n >= valueStart)) {
      return middle;
    }

    if (n < valueStart) {
      end = middle;
    } else if (n > valueEnd) {
      start = middle + 1;
    }
  }
  return -1;
  }

  commitArray.forEach((item) => {
    //–Ω–∞—Ö–æ–¥–∏–º –æ–±—ä–µ–∫—Ç —Å–ø—Ä–∏–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ —Å–ø—Ä–∏–Ω—Ç–æ–≤
    const sprintItem = sprintsList[binarySearch(sprintsList, item.timestamp)];
    //–ø–ª—é—Å—É–µ–º –∫–æ–º–º–∏—Ç—ã –∫ –∫–∞–∂–¥–æ–º—É —Å–ø—Ä–∏–Ω—Ç—É
    sprintItem.value++;

    //–¥–ª—è —à–∞–±–ª–æ–Ω–∞ diagram —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø—Ä–æ—à–ª–æ–º—É —Å–ø—Ä–∏–Ω—Ç—É
    if (sprintItem.id === sprint.sprintId - 1) {
      //–Ω–∞—Ö–æ–¥–∏–º —Ä–∞–∑–º–µ—Ä –∫–æ–º–º–∏—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–∞—Ö –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–∞–∑–Ω–∏—Ü—ã –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–ø—Ä–∏–Ω—Ç–æ–≤
      const sumString = item.summaries.reduce((prev, summary) => {
        return prev += summaryList[typeof summary === 'object' ? summary.id : summary].change;
      }, 0);
      if(sumString <= 100) {
        previousChange['100']++;
      } else if(sumString <= 500) {
        previousChange['500']++;
      } else if(sumString <= 1000) {
        previousChange['1000']++;
      } else {
        previousChange['1001']++;
      }
    }

    //—Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å–ø—Ä–∏–Ω—Ç—É
    if(sprintItem.id === sprint.sprintId) {
      userList[typeof item.author === 'object' ? item.author.id : item.author].valueText++;
      const sumString = item.summaries.reduce((prev, summary) => {
        return prev += summaryList[typeof summary === 'object' ? summary.id : summary].change;
      }, 0);
      if(sumString <= 100) {
        currentChange['100']++;
      } else if(sumString <= 500) {
        currentChange['500']++;
      } else if(sumString <= 1000) {
        currentChange['1000']++;
      } else {
        currentChange['1001']++;
      }

      //—Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —á–∞—Å–∞—Ö –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ —Å–ø—Ä–∏–Ω—Ç–∞ –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞ –¥–ª–∏–Ω–Ω–æ–π 168
      const commitTime = ((new Date(item.timestamp)).getDay() - (new Date(sprintItem.startAt)).getDay())*24 + (new Date(item.timestamp)).getHours();
      activityData[commitTime]++;
    }
  });

  //–¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–µ—Ä–µ–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —à–∞–±–ª–æ–Ω–∞—Ö –æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  userList = Object.values(userList);

  //
  function setEnding(number) {
    const endingsArray = {one: '', two: '–∞', three: '–æ–≤'};
    const remainderTens = number % 10;
    const remainderHundred = number % 100;
    if ((4 < number)&&(number < 21)||(remainderTens === 0)||(remainderHundred > 4)&&(remainderHundred < 21)||(remainderTens > 4)&&(remainderTens < 21)) {
      return `${endingsArray.three}`
    } else if ((number === 1)||(remainderTens === 1)) {
      return `${endingsArray.one}`
    } else {
      return `${endingsArray.two}`
    }
  }

  //—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–º–∏—Ç–æ–≤
  userList.sort((a, b) => {
    b = b.valueText;
    a = a.valueText;
    return b - a;
  });

  //–ø–æ–≤—Ç–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —à–∞–±–ª–æ–Ω–∞—Ö leaders –∏ chart, –ø–ª—é—Å –¥–∞–ª—å—à–µ —É –Ω–∞—Å –µ—â–µ –æ–¥–Ω–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ª–∞–π–∫–∞–º
  const usersCommit = userList.map((user) => {
    return {
      id: user.id,
      name: user.name,
      avatar: user.avatar,
      valueText: String(user.valueText)
    };
  });

  userList.sort((a, b) => {
    b = b.likes;
    a = a.likes;
    return b - a;
  });

  resultArray.push({
    alias: 'leaders',
    data: {
      title: '–ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∫–æ–º–º–∏—Ç–æ–≤',
      subtitle: `${currentSprint.name}`,
      emoji: 'üëë',
      users: usersCommit
    }
  });

  resultArray.push({
    alias: 'vote',
    data: {
      title: '–°–∞–º—ã–π üîé –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
      subtitle: `${currentSprint.name}`,
      emoji: 'üîé',
      users: userList.map((user) => {
        return {
          id: user.id,
          name: user.name,
          avatar: user.avatar,
          valueText: `${user.likes} –≥–æ–ª–æ—Å${setEnding(user.likes)}`
        };
      })
    }
  });

  resultArray.push({
    alias: 'chart',
    data: {
      title: '–ö–æ–º–º–∏—Ç—ã',
      subtitle: `${currentSprint.name}`,
      values: sprintsList.map((item) => {
        if(sprint.sprintId === item.id) {
          return {
            title: String(item.id),
            hint: item.name,
            value: item.value,
            active: true
          }
        }
        return {
          title: String(item.id),
          hint: item.name,
          value: item.value,
        };
      }),
      users: usersCommit
    }
  });

  resultArray.push({
    alias: 'diagram',
    data: {
      title: '–†–∞–∑–º–µ—Ä –∫–æ–º–º–∏—Ç–æ–≤',
      subtitle: `${currentSprint.name}`,
      totalText: `${currentSprint.value} –∫–æ–º–º–∏—Ç${setEnding(currentSprint.value)}`,
      differenceText: `${currentSprint.value > previousSprint.value ? '+' : ''}${currentSprint.value - previousSprint.value} —Å –ø—Ä–æ—à–ª–æ–≥–æ —Å–ø—Ä–∏–Ω—Ç–∞`,
      categories: [
        {title: '> 1001 —Å—Ç—Ä–æ–∫–∏', valueText: `${currentChange['1001']} –∫–æ–º–º–∏—Ç${setEnding(currentChange['1001'])}`, differenceText: `${currentChange['1001'] > previousChange['1001'] ? '+' : ''}${currentChange['1001'] - previousChange['1001']} –∫–æ–º–º–∏—Ç${setEnding(Math.abs(currentChange['1001'] - previousChange['1001']))}`},
        {title: '501 ‚Äî 1000 —Å—Ç—Ä–æ–∫', valueText: `${currentChange['1000']} –∫–æ–º–º–∏—Ç${setEnding(currentChange['1000'])}`, differenceText: `${currentChange['1000'] > previousChange['1000'] ? '+' : ''}${currentChange['1000'] - previousChange['1000']} –∫–æ–º–º–∏—Ç${setEnding(Math.abs(currentChange['1000'] - previousChange['1000']))}`},
        {title: '101 ‚Äî 500 —Å—Ç—Ä–æ–∫', valueText: `${currentChange['500']} –∫–æ–º–º–∏—Ç${setEnding(currentChange['500'])}`, differenceText: `${currentChange['500'] > previousChange['500'] ? '+' : ''}${currentChange['500'] - previousChange['500']} –∫–æ–º–º–∏—Ç${setEnding(Math.abs(currentChange['500'] - previousChange['500']))}`},
        {title: '1 ‚Äî 100 —Å—Ç—Ä–æ–∫', valueText: `${currentChange['100']} –∫–æ–º–º–∏—Ç${setEnding(currentChange['100'])}`, differenceText: `${currentChange['100'] > previousChange['100'] ? '+' : ''}${currentChange['100'] - previousChange['100']} –∫–æ–º–º–∏—Ç${setEnding(Math.abs(currentChange['100'] - previousChange['100']))}`}
      ]
    }
  });

  resultArray.push({
    alias: 'activity',
    data: {
      title: '–ö–æ–º–º–∏—Ç—ã',
      subtitle: `${currentSprint.name}`,
      data: {
        sun: activityData.slice(0, 24),
        mon: activityData.slice(24, 48),
        tue: activityData.slice(48, 72),
        wed: activityData.slice(72, 96),
        thu: activityData.slice(96, 120),
        fri: activityData.slice(120, 144),
        sat: activityData.slice(144, 168)
      }
    }
  });

  return resultArray;
}

// –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

// const oleg = JSON.stringify(prepareData(dataInput, { sprintId: 977}), null, 2);

// fs.writeFile(outputdataJson, oleg, (err , files) => {
//   if (err) {
//     console.log(err);
//     return;
//   }
// });

module.exports = {
  prepareData
}
